name: Build Modules
on:
  workflow_call:
    inputs:
      from_ci:
        type: boolean
        required: false
        default: true

  workflow_dispatch:

jobs:
  run:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Add DEF_OPTIONS_FILE [multi-options]
        uses: jacobtomlinson/gha-find-replace@v3
        env:
          before: DEF_RV_BRAND="ReVanced"
        with:
          find: ${{ env.before }}
          replace: "${{ env.before }}\nDEF_OPTIONS_FILE=$(toml_get \"$main_config_t\" options-file) || DEF_OPTIONS_FILE=\"options.json\""
          include: "build.sh"
          regex: false

      - name: Add app_args-options_file [multi-options]
        uses: jacobtomlinson/gha-find-replace@v3
        env:
          before: app_args[rv_brand]="$DEF_RV_BRAND"
        with:
          find: ${{ env.before }}
          replace: "${{ env.before }}\napp_args[options_file]=$(toml_get \"$t\" options-file) || app_args[options_file]=\"$DEF_OPTIONS_FILE\""
          include: "build.sh"
          regex: false

      - name: Replace options.json [multi-options]
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "--options=options.json"
          replace: "--options=$options_file"
          include: "utils.sh"
          regex: false

      - name: Add local options_file [multi-options]
        uses: jacobtomlinson/gha-find-replace@v3
        env:
          before: local arch_f="${arch// /}"
        with:
          find: ${{ env.before }}
          replace: "${{ env.before }}\nlocal options_file=${args[options_file]}"
          include: "utils.sh"
          regex: false

      - name: Check CLIENT_ID secrets [client-id]
        id: check_client_id
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          infinity: ${{ secrets.INFINITY_CLIENT_ID }}
          sync: ${{ secrets.SYNC_CLIENT_ID }}
          boost: ${{ secrets.BOOST_CLIENT_ID }}
        if: ${{ env.infinity != '' || env.sync != '' || env.boost != '' }}
        run: |
          echo "AVAILABLE=1" >> $GITHUB_OUTPUT

      - name: Replace client_id oauth token [client-id]     
        uses: cschleiden/replace-tokens@v1
        if: ${{ steps.check_client_id.outputs.AVAILABLE == 1 }}
        with:
          tokenPrefix: '${'
          tokenSuffix: '}'
          files: '["*.json"]'
        env :
          INFINITY_CLIENT_ID: ${{ secrets.INFINITY_CLIENT_ID }}
          SYNC_CLIENT_ID: ${{ secrets.SYNC_CLIENT_ID }}
          BOOST_CLIENT_ID: ${{ secrets.BOOST_CLIENT_ID }}

      - name: Replace signing keystore info
        env :
          keystore_info: ${{ secrets.SIGN_KEYSTORE_INFO }}
        uses: jacobtomlinson/gha-find-replace@v3
        if: ${{ env.keystore_info != '' }}
        with:
          find: "--keystore-entry-password=123456789 --keystore-password=123456789 --signer=jhc --keystore-entry-alias=jhc"
          replace: ${{ secrets.SIGN_KEYSTORE_INFO }}
          include: "utils.sh"
          regex: false

      - name: Update config
        if: ${{ inputs.from_ci }}
        run: |
          if git checkout origin/update build.md; then
            UPDATE_CFG=$(./build.sh config.toml --config-update)
            if [ "$UPDATE_CFG" ]; then
              echo "$UPDATE_CFG" > config.toml
            fi
          fi

      - name: Get next version code [version]
        id: next_ver_code
        uses: reecetech/version-increment@2024.4.3
        with:
          scheme: calver

      - name: Build modules/APKs
        run: ./build.sh config.toml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: $GITHUB_REPOSITORY
          NEXT_VER_CODE: ${{ steps.next_ver_code.outputs.v-version }}

      - name: Get output
        id: get_output
        run: |
          DELIM="$(openssl rand -hex 8)"
          echo "BUILD_LOG<<${DELIM}" >> "$GITHUB_OUTPUT"
          cat build.md >> "$GITHUB_OUTPUT"
          echo "${DELIM}" >> "$GITHUB_OUTPUT"
          cp -f build.md build.tmp

      - name: Get current date
        id: date
        run: |
          echo "CURRENT_DATE=$(date +%d)" >> "$GITHUB_OUTPUT"

      - name: Upload modules to release
        uses: svenstaro/upload-release-action@v2
        with:
          body: ${{ steps.get_output.outputs.BUILD_LOG }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./build/*
          release_name: ${{ steps.next_ver_code.outputs.v-version }} [${{ steps.date.outputs.CURRENT_DATE }}]
          tag: ${{ steps.next_ver_code.outputs.v-version }}
          file_glob: true
          overwrite: true

      - name: Update changelog and Magisk update json
        id: update_config
        run: |
          git checkout -f update || git switch --discard-changes --orphan update
          cp -f build.tmp build.md
          get_update_json() {
            echo "{
            \"version\": \"$1\",
            \"versionCode\": ${{ steps.next_ver_code.outputs.v-version }},
            \"zipUrl\": \"$2\",
            \"changelog\": \"https://raw.githubusercontent.com/$GITHUB_REPOSITORY/update/build.md\"
          }"
          }

          cd build || { echo "build folder not found"; exit 1; }
          for OUTPUT in *magisk*.zip; do
            [ "$OUTPUT" = "*magisk*.zip" ] && continue
            ZIP_S=$(unzip -p "$OUTPUT" module.prop)
            if ! UPDATE_JSON=$(echo "$ZIP_S" | grep updateJson); then continue; fi
            UPDATE_JSON="${UPDATE_JSON##*/}"
            VER=$(echo "$ZIP_S" | grep version=)
            VER="${VER##*=}"
            DLURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.v-version }}/${OUTPUT}"
            get_update_json "$VER" "$DLURL" >"../$UPDATE_JSON"
          done
          cd ..

          find . -name "*-update.json" | grep . || : >dummy-update.json

      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: update
          skip_checkout: true
          file_pattern: build.md *-update.json
          commit_message: Bump version ${{ steps.next_ver_code.outputs.v-version }}
